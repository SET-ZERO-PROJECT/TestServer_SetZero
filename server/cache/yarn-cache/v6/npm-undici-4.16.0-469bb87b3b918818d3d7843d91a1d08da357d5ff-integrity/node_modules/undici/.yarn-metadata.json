{
  "manifest": {
    "name": "undici",
    "version": "4.16.0",
    "description": "An HTTP/1.1 client, written from scratch for Node.js",
    "homepage": "https://undici.nodejs.org/",
    "bugs": {
      "url": "https://github.com/nodejs/undici/issues"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/nodejs/undici.git"
    },
    "license": "MIT",
    "author": {
      "name": "Matteo Collina",
      "email": "hello@matteocollina.com"
    },
    "contributors": [
      {
        "name": "Robert Nagy",
        "url": "https://github.com/ronag"
      }
    ],
    "keywords": [
      "fetch",
      "http",
      "https",
      "promise",
      "request",
      "curl",
      "wget",
      "xhr",
      "whatwg"
    ],
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "*.d.ts",
      "index.js",
      "lib",
      "types",
      "docs"
    ],
    "scripts": {
      "build:node": "npx esbuild@0.14.25 index.js --bundle --platform=node --outfile=undici.js",
      "prebuild:wasm": "docker build -t llhttp_wasm_builder -f build/Dockerfile .",
      "build:wasm": "node build/wasm.js --docker",
      "lint": "standard | snazzy",
      "lint:fix": "standard --fix | snazzy",
      "test": "npm run test:tap && npm run test:node-fetch && npm run test:fetch && npm run test:jest && tsd",
      "test:node-fetch": "node scripts/verifyVersion.js 16 || mocha test/node-fetch",
      "test:fetch": "node scripts/verifyVersion.js 16 || tap test/fetch/*.js",
      "test:jest": "jest",
      "test:tap": "tap test/*.js test/diagnostics-channel/*.js",
      "test:tdd": "tap test/*.js test/diagnostics-channel/*.js -w",
      "test:typescript": "tsd",
      "coverage": "nyc --reporter=text --reporter=html npm run test",
      "coverage:ci": "nyc --reporter=lcov npm run test",
      "bench": "concurrently -k -s first npm:bench:server npm:bench:run",
      "bench:server": "node benchmarks/server.js",
      "prebench:run": "node benchmarks/wait.js",
      "bench:run": "CONNECTIONS=1 node --experimental-wasm-simd benchmarks/benchmark.js && CONNECTIONS=50 node --experimental-wasm-simd benchmarks/benchmark.js",
      "serve:website": "docsify serve .",
      "prepare": "husky install",
      "fuzz": "jsfuzz test/fuzzing/fuzz.js corpus"
    },
    "devDependencies": {
      "@sinonjs/fake-timers": "^7.0.5",
      "@types/node": "^16.9.1",
      "abort-controller": "^3.0.0",
      "busboy": "^0.3.1",
      "chai": "^4.3.4",
      "chai-as-promised": "^7.1.1",
      "chai-iterator": "^3.0.2",
      "chai-string": "^1.5.0",
      "concurrently": "^6.2.1",
      "cronometro": "^0.8.0",
      "delay": "^5.0.0",
      "docsify-cli": "^4.4.3",
      "formdata-node": "^4.3.1",
      "https-pem": "^2.0.0",
      "husky": "^7.0.2",
      "jest": "^27.2.0",
      "jsfuzz": "^1.0.15",
      "mocha": "^9.1.1",
      "p-timeout": "^3.2.0",
      "pre-commit": "^1.2.2",
      "proxy": "^1.0.2",
      "proxyquire": "^2.1.3",
      "semver": "^7.3.5",
      "sinon": "^11.1.2",
      "snazzy": "^9.0.0",
      "standard": "^16.0.3",
      "tap": "^15.0.9",
      "tsd": "^0.17.0",
      "wait-on": "^6.0.0"
    },
    "engines": {
      "node": ">=12.18"
    },
    "standard": {
      "env": [
        "mocha"
      ],
      "ignore": [
        "lib/llhttp/constants.js",
        "lib/llhttp/utils.js"
      ]
    },
    "tsd": {
      "directory": "test/types",
      "compilerOptions": {
        "esModuleInterop": true,
        "lib": [
          "esnext"
        ]
      }
    },
    "jest": {
      "testMatch": [
        "<rootDir>/test/jest/**"
      ]
    },
    "_registry": "npm",
    "_loc": "D:\\fivemproject\\TestSetZero\\server\\cache\\yarn-cache\\v6\\npm-undici-4.16.0-469bb87b3b918818d3d7843d91a1d08da357d5ff-integrity\\node_modules\\undici\\package.json",
    "readmeFilename": "README.md",
    "readme": "# undici\n\n[![Node CI](https://github.com/nodejs/undici/actions/workflows/nodejs.yml/badge.svg)](https://github.com/nodejs/undici/actions/workflows/nodejs.yml) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/) [![npm version](https://badge.fury.io/js/undici.svg)](https://badge.fury.io/js/undici) [![codecov](https://codecov.io/gh/nodejs/undici/branch/main/graph/badge.svg?token=yZL6LtXkOA)](https://codecov.io/gh/nodejs/undici)\n\nA HTTP/1.1 client, written from scratch for Node.js.\n\n> Undici means eleven in Italian. 1.1 -> 11 -> Eleven -> Undici.\nIt is also a Stranger Things reference.\n\nHave a question about using Undici? Open a [Q&A Discussion](https://github.com/nodejs/undici/discussions/new) or join our official OpenJS [Slack](https://openjs-foundation.slack.com/archives/C01QF9Q31QD) channel.\n\n## Install\n\n```\nnpm i undici\n```\n\n## Benchmarks\n\nThe benchmark is a simple `hello world` [example](benchmarks/benchmark.js) using a\nnumber of unix sockets (connections) with a pipelining depth of 10 running on Node 16.\nThe benchmarks below have the [simd](https://github.com/WebAssembly/simd) feature enabled.\n\n### Connections 1\n\n| Tests               | Samples |        Result | Tolerance | Difference with slowest |\n|---------------------|---------|---------------|-----------|-------------------------|\n| http - no keepalive |      15 |  4.63 req/sec |  ± 2.77 % |                       - |\n| http - keepalive    |      10 |  4.81 req/sec |  ± 2.16 % |                + 3.94 % |\n| undici - stream     |      25 | 62.22 req/sec |  ± 2.67 % |             + 1244.58 % |\n| undici - dispatch   |      15 | 64.33 req/sec |  ± 2.47 % |             + 1290.24 % |\n| undici - request    |      15 | 66.08 req/sec |  ± 2.48 % |             + 1327.88 % |\n| undici - pipeline   |      10 | 66.13 req/sec |  ± 1.39 % |             + 1329.08 % |\n\n### Connections 50\n\n| Tests               | Samples |           Result | Tolerance | Difference with slowest |\n|---------------------|---------|------------------|-----------|-------------------------|\n| http - no keepalive |      50 |  3546.49 req/sec |  ± 2.90 % |                       - |\n| http - keepalive    |      15 |  5692.67 req/sec |  ± 2.48 % |               + 60.52 % |\n| undici - pipeline   |      25 |  8478.71 req/sec |  ± 2.62 % |              + 139.07 % |\n| undici - request    |      20 |  9766.66 req/sec |  ± 2.79 % |              + 175.39 % |\n| undici - stream     |      15 | 10109.74 req/sec |  ± 2.94 % |              + 185.06 % |\n| undici - dispatch   |      25 | 10949.73 req/sec |  ± 2.54 % |              + 208.75 % |\n\n## Quick Start\n\n```js\nimport { request } from 'undici'\n\nconst {\n  statusCode,\n  headers,\n  trailers,\n  body\n} = await request('http://localhost:3000/foo')\n\nconsole.log('response received', statusCode)\nconsole.log('headers', headers)\n\nfor await (const data of body) {\n  console.log('data', data)\n}\n\nconsole.log('trailers', trailers)\n```\n\nUsing [the body mixin from the Fetch Standard](https://fetch.spec.whatwg.org/#body-mixin).\n\n```js\nimport { request } from 'undici'\n\nconst {\n  statusCode,\n  headers,\n  trailers,\n  body\n} = await request('http://localhost:3000/foo')\n\nconsole.log('response received', statusCode)\nconsole.log('headers', headers)\nconsole.log('data', await body.json())\nconsole.log('trailers', trailers)\n```\n\n## Common API Methods\n\nThis section documents our most commonly used API methods. Additional APIs are documented in their own files within the [docs](./docs/) folder and are accessible via the navigation list on the left side of the docs site.\n\n### `undici.request([url, options]): Promise`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`RequestOptions`](./docs/api/Dispatcher.md#parameter-requestoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n  * **maxRedirections** `Integer` - Default: `0`\n\nReturns a promise with the result of the `Dispatcher.request` method.\n\nCalls `options.dispatcher.request(options)`.\n\nSee [Dispatcher.request](./docs/api/Dispatcher.md#dispatcherrequestoptions-callback) for more details.\n\n### `undici.stream([url, options, ]factory): Promise`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`StreamOptions`](./docs/api/Dispatcher.md#parameter-streamoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n  * **maxRedirections** `Integer` - Default: `0`\n* **factory** `Dispatcher.stream.factory`\n\nReturns a promise with the result of the `Dispatcher.stream` method.\n\nCalls `options.dispatcher.stream(options, factory)`.\n\nSee [Dispatcher.stream](docs/api/Dispatcher.md#dispatcherstreamoptions-factory-callback) for more details.\n\n### `undici.pipeline([url, options, ]handler): Duplex`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`PipelineOptions`](docs/api/Dispatcher.md#parameter-pipelineoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n  * **maxRedirections** `Integer` - Default: `0`\n* **handler** `Dispatcher.pipeline.handler`\n\nReturns: `stream.Duplex`\n\nCalls `options.dispatch.pipeline(options, handler)`.\n\nSee [Dispatcher.pipeline](docs/api/Dispatcher.md#dispatcherpipelineoptions-handler) for more details.\n\n### `undici.connect([url, options]): Promise`\n\nStarts two-way communications with the requested resource using [HTTP CONNECT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT).\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`ConnectOptions`](docs/api/Dispatcher.md#parameter-connectoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **maxRedirections** `Integer` - Default: `0`\n* **callback** `(err: Error | null, data: ConnectData | null) => void` (optional)\n\nReturns a promise with the result of the `Dispatcher.connect` method.\n\nCalls `options.dispatch.connect(options)`.\n\nSee [Dispatcher.connect](docs/api/Dispatcher.md#dispatcherconnectoptions-callback) for more details.\n\n### `undici.fetch(input[, init]): Promise`\n\nImplements [fetch](https://fetch.spec.whatwg.org/#fetch-method).\n\n* https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n* https://fetch.spec.whatwg.org/#fetch-method\n\nOnly supported on Node 16.5+.\n\nThis is [experimental](https://nodejs.org/api/documentation.html#documentation_stability_index) and is not yet fully compliant with the Fetch Standard.\nWe plan to ship breaking changes to this feature until it is out of experimental.\nHelp us improve the test coverage by following instructions at [nodejs/undici/#951](https://github.com/nodejs/undici/issues/951).\n\nBasic usage example:\n\n```js\n    import {fetch} from 'undici';\n\n    async function fetchJson() {\n        const res = await fetch('https://example.com')\n        const json = await res.json()\n        console.log(json);\n    }\n```\n\n\n#### `request.body`\n\nA body can be of the following types:\n\n- ArrayBuffer\n- ArrayBufferView\n- AsyncIterables\n- Blob\n- Iterables\n- String\n- URLSearchParams\n- FormData\n\nIn this implementation of fetch, ```request.body``` now accepts ```Async Iterables```. It is not present in the [Fetch Standard.](https://fetch.spec.whatwg.org)\n\n```js\nimport { fetch } from \"undici\";\n\nconst data = {\n  async *[Symbol.asyncIterator]() {\n    yield \"hello\";\n    yield \"world\";\n  },\n};\n\n(async () => {\n  await fetch(\"https://example.com\", { body: data, method: 'POST' });\n})();\n```\n\n#### `response.body`\n\nNodejs has two kinds of streams: [web streams](https://nodejs.org/dist/latest-v16.x/docs/api/webstreams.html) which follow the API of the WHATWG web standard found in browsers, and an older Node-specific [streams API](https://nodejs.org/api/stream.html). `response.body` returns a readable web stream. If you would prefer to work with a Node stream you can convert a web stream using `.fromWeb()`.\n\n```js\n    import {fetch} from 'undici';\n    import {Readable} from 'node:stream';\n\n    async function fetchStream() {\n        const response = await fetch('https://example.com')\n        const readableWebStream = response.body;\n        const readableNodeStream = Readable.fromWeb(readableWebStream);\n    }\n```\n\n#### Specification Compliance\n\nThis section documents parts of the [Fetch Standard](https://fetch.spec.whatwg.org) which Undici does\nnot support or does not fully implement.\n\n##### Garbage Collection\n\n* https://fetch.spec.whatwg.org/#garbage-collection\n\nThe [Fetch Standard](https://fetch.spec.whatwg.org) allows users to skip consuming the response body by relying on\n[garbage collection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#garbage_collection) to release connection resources. Undici does not do the same. Therefore, it is important to always either consume or cancel the response body.\n\nGarbage collection in Node is less aggressive and deterministic\n(due to the lack of clear idle periods that browser have through the rendering refresh rate)\nwhich means that leaving the release of connection resources to the garbage collector can lead\nto excessive connection usage, reduced performance (due to less connection re-use), and even\nstalls or deadlocks when running out of connections.\n\n```js\n// Do\nconst headers = await fetch(url)\n  .then(async res => {\n    for await (const chunk of res.body) {\n      // force consumption of body\n    }\n    return res.headers\n  })\n\n// Do not\nconst headers = await fetch(url)\n  .then(res => res.headers)\n```\n\n### `undici.upgrade([url, options]): Promise`\n\nUpgrade to a different protocol. See [MDN - HTTP - Protocol upgrade mechanism](https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism) for more details.\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`UpgradeOptions`](docs/api/Dispatcher.md#parameter-upgradeoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **maxRedirections** `Integer` - Default: `0`\n* **callback** `(error: Error | null, data: UpgradeData) => void` (optional)\n\nReturns a promise with the result of the `Dispatcher.upgrade` method.\n\nCalls `options.dispatcher.upgrade(options)`.\n\nSee [Dispatcher.upgrade](docs/api/Dispatcher.md#dispatcherupgradeoptions-callback) for more details.\n\n### `undici.setGlobalDispatcher(dispatcher)`\n\n* dispatcher `Dispatcher`\n\nSets the global dispatcher used by Common API Methods.\n\n### `undici.getGlobalDispatcher()`\n\nGets the global dispatcher used by Common API Methods.\n\nReturns: `Dispatcher`\n\n### `UrlObject`\n\n* **port** `string | number` (optional)\n* **path** `string` (optional)\n* **pathname** `string` (optional)\n* **hostname** `string` (optional)\n* **origin** `string` (optional)\n* **protocol** `string` (optional)\n* **search** `string` (optional)\n\n## Specification Compliance\n\nThis section documents parts of the HTTP/1.1 specification which Undici does\nnot support or does not fully implement.\n\n### Expect\n\nUndici does not support the `Expect` request header field. The request\nbody is  always immediately sent and the `100 Continue` response will be\nignored.\n\nRefs: https://tools.ietf.org/html/rfc7231#section-5.1.1\n\n### Pipelining\n\nUndici will only use pipelining if configured with a `pipelining` factor\ngreater than `1`.\n\nUndici always assumes that connections are persistent and will immediately\npipeline requests, without checking whether the connection is persistent.\nHence, automatic fallback to HTTP/1.0 or HTTP/1.1 without pipelining is\nnot supported.\n\nUndici will immediately pipeline when retrying requests after a failed\nconnection. However, Undici will not retry the first remaining requests in\nthe prior pipeline and instead error the corresponding callback/promise/stream.\n\nUndici will abort all running requests in the pipeline when any of them are\naborted.\n\n* Refs: https://tools.ietf.org/html/rfc2616#section-8.1.2.2\n* Refs: https://tools.ietf.org/html/rfc7230#section-6.3.2\n\n### Manual Redirect\n\nSince it is not possible to manually follow an HTTP redirect on server-side,\nUndici returns the actual response instead of an `opaqueredirect` filtered one\nwhen invoked with a `manual` redirect. This aligns `fetch()` with the other\nimplementations in Deno and Cloudflare Workers.\n\nRefs: https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\n\n## Collaborators\n\n* [__Daniele Belardi__](https://github.com/dnlup), <https://www.npmjs.com/~dnlup>\n* [__Ethan Arrowood__](https://github.com/ethan-arrowood), <https://www.npmjs.com/~ethan_arrowood>\n* [__Matteo Collina__](https://github.com/mcollina), <https://www.npmjs.com/~matteo.collina>\n* [__Robert Nagy__](https://github.com/ronag), <https://www.npmjs.com/~ronag>\n* [__Szymon Marczak__](https://github.com/szmarczak), <https://www.npmjs.com/~szmarczak>\n* [__Tomas Della Vedova__](https://github.com/delvedor), <https://www.npmjs.com/~delvedor>\n\n### Releasers\n\n* [__Ethan Arrowood__](https://github.com/ethan-arrowood), <https://www.npmjs.com/~ethan_arrowood>\n* [__Matteo Collina__](https://github.com/mcollina), <https://www.npmjs.com/~matteo.collina>\n* [__Robert Nagy__](https://github.com/ronag), <https://www.npmjs.com/~ronag>\n\n## License\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) Matteo Collina and Undici contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/undici/-/undici-4.16.0.tgz#469bb87b3b918818d3d7843d91a1d08da357d5ff",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/undici/-/undici-4.16.0.tgz",
    "hash": "469bb87b3b918818d3d7843d91a1d08da357d5ff",
    "integrity": "sha512-tkZSECUYi+/T1i4u+4+lwZmQgLXd4BLGlrc7KZPcLIW7Jpq99+Xpc30ONv7nS6F5UNOxp/HBZSSL9MafUrvJbw==",
    "registry": "npm",
    "packageName": "undici",
    "cacheIntegrity": "sha512-tkZSECUYi+/T1i4u+4+lwZmQgLXd4BLGlrc7KZPcLIW7Jpq99+Xpc30ONv7nS6F5UNOxp/HBZSSL9MafUrvJbw== sha1-Rpu4ezuRiBjT14Q9kaHQjaNX1f8="
  },
  "registry": "npm",
  "hash": "469bb87b3b918818d3d7843d91a1d08da357d5ff"
}
{
  "manifest": {
    "name": "@sapphire/shapeshift",
    "version": "2.2.0",
    "description": "Blazing fast input validation and transformation ⚡",
    "author": {
      "name": "@sapphire"
    },
    "license": "MIT",
    "main": "dist/index.js",
    "module": "dist/index.mjs",
    "browser": "dist/index.global.js",
    "unpkg": "dist/index.global.js",
    "types": "dist/index.d.ts",
    "exports": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "sideEffects": false,
    "homepage": "https://www.sapphirejs.dev/",
    "scripts": {
      "lint": "eslint src tests --ext ts --fix",
      "format": "prettier --write \"{src,tests}/**/*.ts\"",
      "docs": "typedoc",
      "test": "jest",
      "test:watch": "jest --watch",
      "update": "yarn upgrade-interactive",
      "build": "tsup && tsc -b src",
      "clean": "node scripts/clean.mjs",
      "typecheck": "tsc -p tsconfig.typecheck.json",
      "bump": "cliff-jumper",
      "check-update": "cliff-jumper --dry-run",
      "prepack": "rollup-type-bundler -e node:util",
      "prepare": "husky install .github/husky"
    },
    "devDependencies": {
      "@commitlint/cli": "^16.2.4",
      "@commitlint/config-conventional": "^16.2.4",
      "@favware/cliff-jumper": "^1.4.0",
      "@favware/npm-deprecate": "^1.0.4",
      "@favware/rollup-type-bundler": "^1.0.7",
      "@sapphire/eslint-config": "^4.3.4",
      "@sapphire/prettier-config": "^1.4.3",
      "@sapphire/ts-config": "^3.3.4",
      "@types/jest": "^27.4.1",
      "@types/node": "^17.0.30",
      "@typescript-eslint/eslint-plugin": "^5.21.0",
      "@typescript-eslint/parser": "^5.21.0",
      "cz-conventional-changelog": "^3.3.0",
      "eslint": "^8.14.0",
      "eslint-config-prettier": "^8.5.0",
      "eslint-plugin-prettier": "^4.0.0",
      "husky": "^7.0.4",
      "jest": "^27.5.1",
      "jest-circus": "^27.5.1",
      "lint-staged": "^12.4.1",
      "prettier": "^2.6.2",
      "pretty-quick": "^3.1.3",
      "ts-jest": "^27.1.4",
      "tsup": "^5.12.6",
      "typedoc": "^0.22.15",
      "typedoc-plugin-mdn-links": "^1.0.6",
      "typescript": "^4.6.4"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/sapphiredev/shapeshift.git"
    },
    "files": [
      "dist/**/*.js*",
      "dist/**/*.mjs*",
      "dist/**/*.d*"
    ],
    "engines": {
      "node": ">=v15.0.0",
      "npm": ">=7.0.0"
    },
    "keywords": [
      "@sapphire/shapeshift",
      "shapeshift",
      "bot",
      "typescript",
      "ts",
      "yarn",
      "sapphire",
      "schema",
      "validation",
      "type-checking",
      "checking",
      "input-validation",
      "runtime-validation",
      "ow",
      "type-validation",
      "zod"
    ],
    "bugs": {
      "url": "https://github.com/sapphiredev/shapeshift/issues"
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "lint-staged": {
      "*.{mjs,js,ts}": "eslint --fix --ext mjs,js,ts"
    },
    "config": {
      "commitizen": {
        "path": "./node_modules/cz-conventional-changelog"
      }
    },
    "publishConfig": {
      "access": "public"
    },
    "resolutions": {
      "ansi-regex": "^5.0.1",
      "minimist": "^1.2.6",
      "jest-environment-jsdom": "https://registry.yarnpkg.com/@favware/skip-dependency/-/skip-dependency-1.1.3.tgz"
    },
    "prettier": "@sapphire/prettier-config",
    "packageManager": "yarn@3.2.0",
    "_registry": "npm",
    "_loc": "D:\\fivemproject\\TestSetZero\\server\\cache\\yarn-cache\\v6\\npm-@sapphire-shapeshift-2.2.0-9c1221b538fd0f966766158176c686a3a5c98490-integrity\\node_modules\\@sapphire\\shapeshift\\package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n\n![Sapphire Logo](https://cdn.skyra.pw/gh-assets/sapphire-banner.png)\n\n# @sapphire/shapeshift\n\n**ShapeShift**\n\nBlazing fast input validation and transformation ⚡\n\n[![GitHub](https://img.shields.io/github/license/sapphiredev/shapeshift)](https://github.com/sapphiredev/shapeshift/blob/main/LICENSE.md)\n[![codecov](https://codecov.io/gh/sapphiredev/shapeshift/branch/main/graph/badge.svg?token=RF4mMKx6lL)](https://codecov.io/gh/sapphiredev/shapeshift)\n[![npm](https://img.shields.io/npm/v/@sapphire/shapeshift?color=crimson&logo=npm&style=flat-square)](https://www.npmjs.com/package/@sapphire/shapeshift)\n\n</div>\n\n## Description\n\nA very fast and lightweight input validation and transformation library for JavaScript.\n\n> **Note**: ShapeShift requires Node.js v15.0.0 or higher to work.\n\n## Features\n\n-   TypeScript friendly\n-   Offers CJS, ESM and UMD builds\n-   API similar to [`zod`]\n-   Faster than ⚡\n\n## Usage\n\n**_For complete usages, please dive into our [documentation]_**\n\n### Basic usage\n\nCreating a simple string schema\n\n```typescript\nimport { s } from '@sapphire/shapeshift';\n\nconst mySchema = s.string;\n\n// Parse\nmySchema.parse('sapphire'); // => returns 'sapphire'\nmySchema.parse(12); // throws ValidationError\n```\n\nCreating an object schema\n\n```typescript\nimport { s } from '@sapphire/shapeshift';\n\nconst user = s.object({\n\tusername: s.string\n});\n\nuser.parse({ username: 'Sapphire' });\n```\n\n### Defining schemas\n\n#### Primitives\n\n```typescript\nimport { s } from '@sapphire/shapeshift';\n\n// Primitives\ns.string;\ns.number;\ns.bigint;\ns.boolean;\ns.date;\n\n// Empty Types\ns.undefined;\ns.null;\ns.nullish; // Accepts undefined | null\n\n// Catch-all Types\ns.any;\ns.unknown;\n\n// Never Type\ns.never;\n```\n\n#### Literals\n\n```typescript\ns.literal('sapphire');\ns.literal(12);\ns.literal(420n);\ns.literal(true);\ns.literal(new Date(1639278160000)); // s.date.eq(1639278160000);\n```\n\n#### Strings\n\nShapeShift includes a handful of string-specific validations:\n\n```typescript\ns.string.lengthLt(5);\ns.string.lengthLe(5);\ns.string.lengthGt(5);\ns.string.lengthGe(5);\ns.string.lengthEq(5);\ns.string.lengthNe(5);\ns.string.email;\ns.string.url();\ns.string.uuid();\ns.string.regex(regex);\ns.string.ip();\ns.string.ipv4;\ns.string.ipv6;\n```\n\n#### Numbers\n\nShapeShift includes a handful of number-specific validations:\n\n```typescript\ns.number.gt(5); // > 5\ns.number.ge(5); // >= 5\ns.number.lt(5); // < 5\ns.number.le(5); // <= 5\ns.number.eq(5); // === 5\ns.number.ne(5); // !== 5\n\ns.number.eq(NaN); // special case: Number.isNaN\ns.number.ne(NaN); // special case: !Number.isNaN\n\ns.number.int; // value must be an integer\ns.number.safeInt; // value must be a safe integer\ns.number.finite; // value must be finite\n\ns.number.positive; // .ge(0)\ns.number.negative; // .lt(0)\n\ns.number.divisibleBy(5); // Divisible by 5\n```\n\nAnd transformations:\n\n```typescript\ns.number.abs; // Transforms the number to an absolute number\ns.number.sign; // Gets the number's sign\n\ns.number.trunc; // Transforms the number to the result of `Math.trunc`\ns.number.floor; // Transforms the number to the result of `Math.floor`\ns.number.fround; // Transforms the number to the result of `Math.fround`\ns.number.round; // Transforms the number to the result of `Math.round`\ns.number.ceil; // Transforms the number to the result of `Math.ceil`\n```\n\n#### BigInts\n\nShapeShift includes a handful of number-specific validations:\n\n```typescript\ns.bigint.gt(5n); // > 5n\ns.bigint.ge(5n); // >= 5n\ns.bigint.lt(5n); // < 5n\ns.bigint.le(5n); // <= 5n\ns.bigint.eq(5n); // === 5n\ns.bigint.ne(5n); // !== 5n\n\ns.bigint.positive; // .ge(0n)\ns.bigint.negative; // .lt(0n)\n\ns.bigint.divisibleBy(5n); // Divisible by 5n\n```\n\nAnd transformations:\n\n```typescript\ns.bigint.abs; // Transforms the bigint to an absolute bigint\n\ns.bigint.intN(5); // Clamps to a bigint to a signed bigint with 5 digits, see BigInt.asIntN\ns.bigint.uintN(5); // Clamps to a bigint to an unsigned bigint with 5 digits, see BigInt.asUintN\n```\n\n#### Booleans\n\nShapeShift includes a few boolean-specific validations:\n\n```typescript\ns.boolean.true; // value must be true\ns.boolean.false; // value must be false\n\ns.boolean.eq(true); // s.boolean.true\ns.boolean.eq(false); // s.boolean.false\n\ns.boolean.ne(true); // s.boolean.false\ns.boolean.ne(false); // s.boolean.true\n```\n\n#### Arrays\n\n```typescript\nconst stringArray = s.array(s.string);\nconst stringArray = s.string.array;\n```\n\nShapeShift includes a handful of array-specific validations:\n\n```typescript\ns.string.array.lengthLt(5); // Must have less than 5 elements\ns.string.array.lengthLe(5); // Must have 5 or less elements\ns.string.array.lengthGt(5); // Must have more than 5 elements\ns.string.array.lengthGe(5); // Must have 5 or more elements\ns.string.array.lengthEq(5); // Must have exactly 5 elements\ns.string.array.lengthNe(5); // Must not have exactly 5 elements\ns.string.array.lengthRange(0, 4); // Must have at least 0 elements and less than 4 elements (in math, that is [0, 4))\ns.string.array.lengthRangeInclusive(0, 4); // Must have at least 0 elements and at most 4 elements (in math, that is [0, 4])\ns.string.array.lengthRangeExclusive(0, 4); // Must have more than 0 element and less than 4 elements (in math, that is (0, 4))\n```\n\n> **Note**: All `.length` methods define tuple types with the given amount of elements. For example, `s.string.array.lengthGe(2)`'s inferred type is `[string, string, ...string[]]`\n\n#### Tuples\n\nUnlike arrays, tuples have a fixed number of elements and each element can have a different type:\n\n```typescript\nconst dish = s.tuple([\n\ts.string, // Dish's name\n\ts.number.int, // Table's number\n\ts.date // Date the dish was ready for delivery\n]);\n\ndish.parse(['Iberian ham', 10, new Date()]);\n```\n\n#### Objects\n\n```typescript\n// Properties are required by default:\nconst animal = s.object({\n\tname: s.string,\n\tage: s.number\n});\n```\n\n##### `.extend`:\n\nYou can add additional fields using either an object or an ObjectValidator, in this case, you will get a new object validator with the merged properties:\n\n```typescript\nconst pet = animal.extend({\n\towner: s.string.nullish\n});\n\nconst pet = animal.extend(\n\ts.object({\n\t\towner: s.string.nullish\n\t})\n);\n```\n\n> If both schemas share keys, an error will be thrown. Please use `.omit` on the first object if you desire this behaviour.\n\n##### `.pick` / `.omit`:\n\nInspired by TypeScript's built-in `Pick` and `Omit` utility types, all object schemas have the aforementioned methods that return a modifier version:\n\n```typescript\nconst pkg = s.object({\n\tname: s.string,\n\tdescription: s.string,\n\tdependencies: s.string.array\n});\n\nconst justTheName = pkg.pick(['name']);\n// s.object({ name: s.string });\n\nconst noDependencies = pkg.omit(['dependencies']);\n// s.object({ name: s.string, description: s.string });\n```\n\n##### `.partial`\n\nInspired by TypeScript's built-in `Partial` utility type, all object schemas have the aforementioned method that makes all properties optional:\n\n```typescript\nconst user = s.object({\n\tusername: s.string,\n\tpassword: s.string\n}).partial;\n```\n\nWhich is the same as doing:\n\n```typescript\nconst user = s.object({\n\tusername: s.string.optional,\n\tpassword: s.string.optional\n});\n```\n\n#### Unrecognized keys\n\nBy default, ShapeShift will not include keys that are not defined by the schema during parsing:\n\n```typescript\nconst person = s.object({\n\tframework: s.string\n});\n\nperson.parse({\n\tframework: 'Sapphire',\n\tawesome: true\n});\n// => { name: 'Sapphire' }\n```\n\n##### `.strict`\n\nYou can disallow unknown keys with `.strict`. If the input includes any unknown keys, an error will be thrown.\n\n```typescript\nconst person = s.object({\n\tframework: s.string\n}).strict;\n\nperson.parse({\n\tframework: 'Sapphire',\n\tawesome: true\n});\n// => throws ValidationError\n```\n\n##### `.ignore`\n\nYou can use the `.ignore` getter to reset an object schema to the default behaviour (ignoring unrecognized keys).\n\n##### `.passthrough`\n\nYou can use the `.passthrough` getter to make the validator add the unrecognized properties the shape does not have, from the input.\n\n#### Records\n\nRecord schemas are similar to objects, but validate `Record<string, T>` types, keep in mind this does not check for the keys, and cannot support validation for specific ones:\n\n```typescript\nconst tags = s.record(s.string);\n\ntags.parse({ foo: 'bar', hello: 'world' }); // => { foo: 'bar', hello: 'world' }\ntags.parse({ foo: 42 }); // => throws CombinedError\ntags.parse('Hello'); // => throws ValidateError\n```\n\n#### Unions\n\nShapeShift includes a built-in method for composing OR types:\n\n```typescript\nconst stringOrNumber = s.union(s.string, s.number);\n\nstringOrNumber.parse('Sapphire'); // => 'Sapphire'\nstringOrNumber.parse(42); // => 42\nstringOrNumber.parse({}); // => throws CombinedError\n```\n\n#### Enums\n\nEnums are a convenience method that aliases `s.union(s.literal(a), s.literal(b), ...)`:\n\n```typescript\ns.enum('Red', 'Green', 'Blue');\n// s.union(s.literal('Red'), s.literal('Green'), s.literal('Blue'));\n```\n\n#### Maps\n\n```typescript\nconst map = s.map(s.string, s.number);\n// Map<string, number>\n```\n\n#### Sets\n\n```typescript\nconst set = s.set(s.number);\n// Set<number>\n```\n\n#### Instances\n\nYou can use `s.instance(Class)` to check that the input is an instance of a class. This is useful to validate inputs against classes:\n\n```typescript\nclass User {\n\tpublic constructor(public name: string) {}\n}\n\nconst schema = s.instance(User);\nschema.parse(new User('Sapphire')); // => User { name: 'Sapphire' }\nschema.parse('oops' as any); // => throws ValidatorError\n```\n\n---\n\n_**Function validation is not yet implemented and will be made available starting v2.1.0**_\n\n#### Functions // TODO\n\nYou can define function schemas. This checks for whether or not an input is a function:\n\n```typescript\ns.function; // () => unknown\n```\n\nYou can define arguments by passing an array as the first argument, as well as the return type as the second:\n\n```typescript\ns.function([s.string]); // (arg0: string) => unknown\ns.function([s.string, s.number], s.string); // (arg0: string, arg1: number) => string\n```\n\n> **Note**: ShapeShift will transform the given function into one with validation on arguments and output. You can access the `.raw` property of the function to get the unchecked function.\n\n---\n\n#### TypedArray\n\n```ts\nconst typedArray = s.typedArray();\nconst int16Array = s.int16Array;\nconst uint16Array = s.uint16Array;\nconst uint8ClampedArray = s.uint8ClampedArray;\nconst int16Array = s.int16Array;\nconst uint16Array = s.uint16Array;\nconst int32Array = s.int32Array;\nconst uint32Array = s.uint32Array;\nconst float32Array = s.float32Array;\nconst float64Array = s.float64Array;\nconst bigInt64Array = s.bigInt64Array;\nconst bigUint64Array = s.bigUint64Array;\n```\n\nShapeShift includes a handful of validations specific to typed arrays.\n\n```typescript\ns.typedArray().lengthLt(5); // Length must be less than 5\ns.typedArray().lengthLe(5); // Length must be 5 or less\ns.typedArray().lengthGt(5); // Length must be more than 5\ns.typedArray().lengthGe(5); // Length must be 5 or more\ns.typedArray().lengthEq(5); // Length must be exactly 5\ns.typedArray().lengthNe(5); // Length must not be 5\ns.typedArray().lengthRange(0, 4); // Length L must satisfy 0 <= L < 4\ns.typedArray().lengthRangeInclusive(0, 4); // Length L must satisfy 0 <= L <= 4\ns.typedArray().lengthRangeExclusive(0, 4); // Length L must satisfy 0 < L < 4\n```\n\nNote that all of these methods have analogous methods for working with the typed array's byte length, `s.typedArray().byteLengthX()` - for instance, `s.typedArray().byteLengthLt(5)` is the same as `s.typedArray().lengthLt(5)` but for the array's byte length.\n\n### BaseValidator: methods and properties\n\nAll schemas in ShapeShift contain certain methods.\n\n`.run(data: unknown): Result<T, Error>`: given a schema, you can call this method to check whether or not the input is valid. If it is, a `Result` with `success: true` and a deep-cloned value will be returned with the given constraints and transformations. Otherwise, a `Result` with `success: false` and an error is returned.\n\n`.parse(data: unknown): T`: given a schema, you can call this method to check whether or not the input is valid. If it is, a deep-cloned value will be returned with the given constraints and transformations. Otherwise, an error is thrown.\n\n`.transform<R>((value: T) => R): NopValidator<R>`: adds a constraint that modifies the input:\n\n```typescript\nimport { s } from '@sapphire/shapeshift';\n\nconst getLength = s.string.transform((value) => value.length);\ngetLength.parse('Hello There'); // => 11\n```\n\n---\n\n_**Reshape is not yet implemented and will be made available starting v2.1.0**_\n\n> :warning: `.transform`'s functions **must not throw**. If a validation error is desired to be thrown, `.reshape` instead.\n\n`.reshape<R>((value: T) => Result<R, Error> | IConstraint): NopValidator<R>`: adds a constraint able to both validate and modify the input:\n\n```typescript\nimport { s, Result } from '@sapphire/shapeshift';\n\nconst getLength = s.string.reshape((value) => Result.ok(value.length)); // TODO\ngetLength.parse('Hello There'); // => 11\n```\n\n> :warning: `.reshape`'s functions **must not throw**. If a validation error is desired to be thrown, use `Result.err(error)` instead.\n\n---\n\n`.default(value: T | (() => T))`: transform `undefined` into the given value or the callback's returned value:\n\n```typescript\nconst name = s.string.default('Sapphire');\nname.parse('Hello'); // => 'Hello'\nname.parse(undefined); // => 'Sapphire'\n```\n\n```typescript\nconst number = s.number.default(Math.random);\nnumber.parse(12); // => 12\nnumber.parse(undefined); // => 0.989911985608602\nnumber.parse(undefined); // => 0.3224350185068794\n```\n\n> :warning: The default values are not validated.\n\n`.optional`: a convenience method that returns a union of the type with `s.undefined`.\n\n```typescript\ns.string.optional; // s.union(s.string, s.undefined)\n```\n\n`.nullable`: a convenience method that returns a union of the type with `s.nullable`.\n\n```typescript\ns.string.nullable; // s.union(s.string, s.nullable)\n```\n\n`.nullish`: a convenience method that returns a union of the type with `s.nullish`.\n\n```typescript\ns.string.nullish; // s.union(s.string, s.nullish)\n```\n\n`.array`: a convenience method that returns an ArrayValidator with the type.\n\n```typescript\ns.string.array; // s.array(s.string)\n```\n\n`.or`: a convenience method that returns an UnionValidator with the type. This method is also overridden in UnionValidator to just append one more entry.\n\n```typescript\ns.string.or(s.number);\n// => s.union(s.string, s.number)\n\ns.object({ name: s.string }).or(s.string, s.number);\n// => s.union(s.object({ name: s.string }), s.string, s.number)\n```\n\n## Buy us some doughnuts\n\nSapphire Community is and always will be open source, even if we don't get donations. That being said, we know there are amazing people who may still want to donate just to show their appreciation. Thank you very much in advance!\n\nWe accept donations through Open Collective, Ko-fi, Paypal, Patreon and GitHub Sponsorships. You can use the buttons below to donate through your method of choice.\n\n|   Donate With   |                       Address                       |\n| :-------------: | :-------------------------------------------------: |\n| Open Collective | [Click Here](https://sapphirejs.dev/opencollective) |\n|      Ko-fi      |      [Click Here](https://sapphirejs.dev/kofi)      |\n|     Patreon     |    [Click Here](https://sapphirejs.dev/patreon)     |\n|     PayPal      |     [Click Here](https://sapphirejs.dev/paypal)     |\n\n## Contributors ✨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kyranet\"><img src=\"https://avatars.githubusercontent.com/u/24852502?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Román</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=kyranet\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/shapeshift/commits?author=kyranet\" title=\"Documentation\">📖</a> <a href=\"#ideas-kyranet\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/vladfrangu\"><img src=\"https://avatars.githubusercontent.com/u/17960496?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Frangu</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=vladfrangu\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/shapeshift/commits?author=vladfrangu\" title=\"Documentation\">📖</a> <a href=\"#ideas-vladfrangu\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://favware.tech/\"><img src=\"https://avatars.githubusercontent.com/u/4019718?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeroen Claassens</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=favna\" title=\"Documentation\">📖</a> <a href=\"#maintenance-favna\" title=\"Maintenance\">🚧</a> <a href=\"#infra-favna\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n    <td align=\"center\"><a href=\"https://github.com/apps/renovate\"><img src=\"https://avatars.githubusercontent.com/in/2740?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>renovate[bot]</b></sub></a><br /><a href=\"#maintenance-renovate[bot]\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://renovate.whitesourcesoftware.com/\"><img src=\"https://avatars.githubusercontent.com/u/25180681?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>WhiteSource Renovate</b></sub></a><br /><a href=\"#maintenance-renovate-bot\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Khasms\"><img src=\"https://avatars.githubusercontent.com/u/36800359?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>John</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=Khasms\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/imranbarbhuiya\"><img src=\"https://avatars.githubusercontent.com/u/74945038?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Parbez</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=imranbarbhuiya\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/shapeshift/commits?author=imranbarbhuiya\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/sapphiredev/shapeshift/issues?q=author%3Aimranbarbhuiya\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/sapphiredev/shapeshift/commits?author=imranbarbhuiya\" title=\"Documentation\">📖</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n[`zod`]: https://github.com/colinhacks/zod\n[documentation]: https://www.sapphirejs.dev/docs/Documentation/api-shapeshift/\n",
    "licenseText": "# The MIT License (MIT)\n\nCopyright © `2021` `The Sapphire Community and its contributors`\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the “Software”), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@sapphire/shapeshift/-/shapeshift-2.2.0.tgz#9c1221b538fd0f966766158176c686a3a5c98490",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@sapphire/shapeshift/-/shapeshift-2.2.0.tgz",
    "hash": "9c1221b538fd0f966766158176c686a3a5c98490",
    "integrity": "sha512-UEnKgMlQyI0yY/q+lCMX0VJft9y86IsesgbIQj6e62FBYSaMVr+IaMNpi4z45Q14VnuMACbK0yrbHISNqgUYcQ==",
    "registry": "npm",
    "packageName": "@sapphire/shapeshift",
    "cacheIntegrity": "sha512-UEnKgMlQyI0yY/q+lCMX0VJft9y86IsesgbIQj6e62FBYSaMVr+IaMNpi4z45Q14VnuMACbK0yrbHISNqgUYcQ== sha1-nBIhtTj9D5ZnZhWBdsaGo6XJhJA="
  },
  "registry": "npm",
  "hash": "9c1221b538fd0f966766158176c686a3a5c98490"
}